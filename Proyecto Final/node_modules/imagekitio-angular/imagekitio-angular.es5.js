import { Component, ElementRef, EventEmitter, Injectable, Input, NgModule, Output } from '@angular/core';
// import ImageKit from "imagekit-javascript";
var ImageKit = require("imagekit-javascript");
// When SDK is built and packed, the path of this file changes, hence static path cannot work
// const pjson = require("../../package.json");
var SDK_VERSION = '1.0.2';
var ImageKitConfiguration = (function () {
    function ImageKitConfiguration() {
    }
    return ImageKitConfiguration;
}());
var ImagekitService = (function () {
    /**
     * @param {?} configuration
     */
    function ImagekitService(configuration) {
        this.configuration = configuration;
        configuration.sdkVersion = "angular-" + SDK_VERSION, this._ikInstance = new ImageKit(this.configuration);
    }
    Object.defineProperty(ImagekitService.prototype, "ikInstance", {
        /**
         * @return {?}
         */
        get: function () {
            return this._ikInstance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} config
     * @return {?}
     */
    ImagekitService.prototype.getUrl = function (config) {
        var /** @type {?} */ url = this._ikInstance.url(config);
        return url;
    };
    return ImagekitService;
}());
ImagekitService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ImagekitService.ctorParameters = function () { return [
    { type: ImageKitConfiguration, },
]; };
var IkImageComponent = (function () {
    /**
     * @param {?} el
     * @param {?} imagekit
     */
    function IkImageComponent(el, imagekit) {
        this.el = el;
        this.imagekit = imagekit;
        this.transformation = [];
        this.url = '';
        this.lqipUrl = '';
    }
    /**
     * @return {?}
     */
    IkImageComponent.prototype.ngOnInit = function () {
        this.setUrl(this.src, this.path, this.transformation, this.lqip, this.urlEndpoint, this.transformationPosition, this.queryParameters);
    };
    /**
     * @return {?}
     */
    IkImageComponent.prototype.ngOnChanges = function () {
        this.ngOnInit();
    };
    /**
     * @return {?}
     */
    IkImageComponent.prototype.ngAfterViewInit = function () {
        var /** @type {?} */ that = this;
        this.loadImage(this.lqip && this.lqip.active ? this.lqipUrl : this.url);
        var /** @type {?} */ imageObserver = new IntersectionObserver(function (entry, observer) {
            if (entry[0] && entry[0].isIntersecting) {
                var /** @type {?} */ image = entry[0].target;
                that.loadImage(that.url);
                imageObserver.unobserve(image);
            }
        });
        imageObserver.observe(this.el.nativeElement);
    };
    /**
     * @param {?=} src
     * @param {?=} path
     * @param {?=} transformation
     * @param {?=} lqip
     * @param {?=} urlEndpoint
     * @param {?=} transformationPosition
     * @param {?=} queryParameters
     * @return {?}
     */
    IkImageComponent.prototype.setUrl = function (src, path, transformation, lqip, urlEndpoint, transformationPosition, queryParameters) {
        var /** @type {?} */ config = this.getConfigObject(src, path, transformation, transformationPosition, urlEndpoint, queryParameters);
        this.url = this.imagekit.getUrl(config);
        if (lqip && lqip.active === true) {
            this.lqipUrl = this.lqipload(lqip.quality, this.url, this.path);
        }
    };
    /**
     * @param {?=} src
     * @param {?=} path
     * @param {?=} transformation
     * @param {?=} transformationPosition
     * @param {?=} urlEndpoint
     * @param {?=} queryParameters
     * @return {?}
     */
    IkImageComponent.prototype.getConfigObject = function (src, path, transformation, transformationPosition, urlEndpoint, queryParameters) {
        var /** @type {?} */ config = {
            transformation: transformation,
        };
        if (urlEndpoint) {
            config['urlEndpoint'] = urlEndpoint;
        }
        if (queryParameters) {
            config['queryParameters'] = queryParameters;
        }
        if (src) {
            config['src'] = src;
            config['transformationPosition'] = 'query';
        }
        else if (path) {
            config['path'] = path;
            if (transformationPosition) {
                config['transformationPosition'] = transformationPosition;
            }
        }
        else {
            throw new Error('Missing src / path during initialization!');
        }
        return config;
    };
    /**
     * @param {?} url
     * @return {?}
     */
    IkImageComponent.prototype.loadImage = function (url) {
        var /** @type {?} */ nativeElement = this.el.nativeElement;
        var /** @type {?} */ attributes = nativeElement.attributes;
        var /** @type {?} */ attrsToSet = this.namedNodeMapToObject(attributes);
        attrsToSet['src'] = url;
        var /** @type {?} */ image = nativeElement.children[0];
        this.setElementAttributes(image, attrsToSet);
    };
    /**
     * @param {?} source
     * @return {?}
     */
    IkImageComponent.prototype.namedNodeMapToObject = function (source) {
        var /** @type {?} */ target = {};
        Object.keys(source).forEach(function (index) {
            var /** @type {?} */ name = source[index].name;
            var /** @type {?} */ value = source[index].value;
            target[name] = value;
        });
        return target;
    };
    ;
    /**
     * @param {?} quality
     * @param {?} url
     * @param {?} path
     * @return {?}
     */
    IkImageComponent.prototype.lqipload = function (quality, url, path) {
        var /** @type {?} */ lqip = "";
        if (path) {
            var /** @type {?} */ newUrl = url.split("tr:");
            if (newUrl[0] === url) {
                var /** @type {?} */ temp = url.split("/");
                lqip = temp[0] + "//" + temp[2] + "/" + temp[3] + "/tr:q-" + quality + "/" + temp[4];
            }
            else {
                lqip = newUrl[0] + "tr:q-" + quality + newUrl[1];
            }
        }
        else {
            lqip = url + "?tr=q-" + quality;
        }
        return lqip;
    };
    /**
     * @param {?} element
     * @param {?} attributesLiteral
     * @return {?}
     */
    IkImageComponent.prototype.setElementAttributes = function (element, attributesLiteral) {
        Object.keys(attributesLiteral).forEach(function (attrName) {
            element.setAttribute(attrName, attributesLiteral[attrName]);
        });
    };
    return IkImageComponent;
}());
IkImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'ik-image',
                template: "<img src={{src}}>",
            },] },
];
/**
 * @nocollapse
 */
IkImageComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: ImagekitService, },
]; };
IkImageComponent.propDecorators = {
    'src': [{ type: Input, args: ['src',] },],
    'path': [{ type: Input, args: ['path',] },],
    'urlEndpoint': [{ type: Input, args: ['urlEndpoint',] },],
    'transformation': [{ type: Input, args: ['transformation',] },],
    'transformationPosition': [{ type: Input, args: ['transformationPosition',] },],
    'queryParameters': [{ type: Input, args: ['queryParameters',] },],
    'lqip': [{ type: Input, args: ['lqip',] },],
};
var IkUploadComponent = (function () {
    /**
     * @param {?} imagekit
     */
    function IkUploadComponent(imagekit) {
        this.imagekit = imagekit;
        this.onError = new EventEmitter();
        this.onSuccess = new EventEmitter();
        this.fileToUpload = null;
    }
    /**
     * @return {?}
     */
    IkUploadComponent.prototype.ngOnInit = function () {
    };
    /**
     * @param {?} e
     * @return {?}
     */
    IkUploadComponent.prototype.handleFileInput = function (e) {
        var /** @type {?} */ onError = this.onError;
        var /** @type {?} */ onSuccess = this.onSuccess;
        var /** @type {?} */ files = e.target.files;
        this.fileToUpload = files.item(0);
        if (this.onFileInput) {
            this.onFileInput(e);
            return;
        }
        var /** @type {?} */ params = this.getUploadParams(this.fileToUpload, this.fileName, this.useUniqueFileName, this.tags, this.folder, this.isPrivateFile, this.customCoordinates, this.responseFields);
        var /** @type {?} */ ik = this.imagekit.ikInstance;
        ik.upload(params, function (err, result) {
            if (err) {
                onError.emit(err);
            }
            else {
                onSuccess.emit(result);
            }
        });
    };
    /**
     * @param {?} file
     * @param {?} fileName
     * @param {?=} useUniqueFileName
     * @param {?=} tags
     * @param {?=} folder
     * @param {?=} isPrivateFile
     * @param {?=} customCoordinates
     * @param {?=} responseFields
     * @return {?}
     */
    IkUploadComponent.prototype.getUploadParams = function (file, fileName, useUniqueFileName, tags, folder, isPrivateFile, customCoordinates, responseFields) {
        var /** @type {?} */ params = {
            file: file,
            fileName: fileName,
        };
        if (useUniqueFileName !== undefined) {
            Object.assign(params, { useUniqueFileName: useUniqueFileName });
        }
        if (folder !== undefined) {
            Object.assign(params, { folder: folder });
        }
        if (isPrivateFile !== undefined) {
            Object.assign(params, { isPrivateFile: isPrivateFile });
        }
        if (tags !== undefined) {
            Object.assign(params, { tags: tags });
        }
        if (customCoordinates !== undefined) {
            Object.assign(params, { customCoordinates: customCoordinates });
        }
        if (responseFields !== undefined) {
            Object.assign(params, { responseFields: responseFields });
        }
        return params;
    };
    return IkUploadComponent;
}());
IkUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'ik-upload',
                template: "<input type=\"file\" (change)=\"handleFileInput($event)\" />",
                providers: [ImagekitService]
            },] },
];
/**
 * @nocollapse
 */
IkUploadComponent.ctorParameters = function () { return [
    { type: ImagekitService, },
]; };
IkUploadComponent.propDecorators = {
    'fileName': [{ type: Input, args: ['fileName',] },],
    'useUniqueFileName': [{ type: Input, args: ['useUniqueFileName',] },],
    'tags': [{ type: Input, args: ['tags',] },],
    'folder': [{ type: Input, args: ['folder',] },],
    'isPrivateFile': [{ type: Input, args: ['isPrivateFile',] },],
    'customCoordinates': [{ type: Input, args: ['customCoordinates',] },],
    'responseFields': [{ type: Input, args: ['responseFields',] },],
    'onError': [{ type: Output },],
    'onSuccess': [{ type: Output },],
    'onFileInput': [{ type: Input },],
};
var ImagekitioAngularModule = (function () {
    function ImagekitioAngularModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    ImagekitioAngularModule.forRoot = function (config) {
        return {
            ngModule: ImagekitioAngularModule,
            providers: [
                { provide: ImageKitConfiguration, useValue: config }
            ]
        };
    };
    return ImagekitioAngularModule;
}());
ImagekitioAngularModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IkUploadComponent, IkImageComponent],
                imports: [],
                exports: [IkUploadComponent, IkImageComponent],
                providers: [ImagekitService]
            },] },
];
/**
 * @nocollapse
 */
ImagekitioAngularModule.ctorParameters = function () { return []; };
/*
 * Public API Surface of imagekitio-angular
 */
/**
 * Generated bundle index. Do not edit.
 */
export { IkImageComponent, IkUploadComponent, ImagekitioAngularModule, ImageKitConfiguration as ɵa, ImagekitService as ɵb };
//# sourceMappingURL=imagekitio-angular.es5.js.map
